{"ast":null,"code":"import { RECEIVE_POST, RECEIVE_POSTS, RECEIVE_NEW_POST, REMOVE_POST } from \"../actions/post_actions\";\nimport { RECEIVE_COMMENT, REMOVE_COMMENT } from '../actions/comment_actions';\nimport { merge } from 'lodash';\nexport default ((state = {}, action) => {\n  Object.freeze(state);\n  let nextState;\n\n  switch (action.type) {\n    case RECEIVE_NEW_POST:\n      return { ...state,\n        [action.post.data._id]: action.post.data\n      };\n\n    case RECEIVE_POSTS:\n      return action.posts;\n\n    case RECEIVE_USER_POSTS:\n      return action.posts.userId;\n\n    case RECEIVE_POST:\n      return { ...state,\n        [action.post._id]: action.post\n      };\n\n    case RECEIVE_COMMENT:\n      nextState = Object.assign({}, state);\n      nextState[action.postId][\"comments\"].push(action.comment);\n      return nextState;\n\n    case REMOVE_COMMENT:\n      nextState = merge({}, state);\n      let comments = nextState[action.postId][\"comments\"].slice();\n      let idx = comments.findIndex(comment => comment._id === action.commentId);\n      comments.splice(idx, 1);\n      nextState[action.postId][\"comments\"] = comments;\n      return nextState;\n\n    case REMOVE_POST:\n      nextState = Object.assign({}, state);\n      delete nextState[action.postId.data];\n      return nextState;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/src/reducers/posts_reducer.js"],"names":["RECEIVE_POST","RECEIVE_POSTS","RECEIVE_NEW_POST","REMOVE_POST","RECEIVE_COMMENT","REMOVE_COMMENT","merge","state","action","Object","freeze","nextState","type","post","data","_id","posts","RECEIVE_USER_POSTS","userId","assign","postId","push","comment","comments","slice","idx","findIndex","commentId","splice"],"mappings":"AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,gBAHF,EAIEC,WAJF,QAKO,yBALP;AAMA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,4BAAhD;AACA,SAAQC,KAAR,QAAoB,QAApB;AAEA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACrCC,EAAAA,MAAM,CAACC,MAAP,CAAcH,KAAd;AACA,MAAII,SAAJ;;AACA,UAAQH,MAAM,CAACI,IAAf;AACE,SAAKV,gBAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAY,SAACC,MAAM,CAACK,IAAP,CAAYC,IAAZ,CAAiBC,GAAlB,GAAwBP,MAAM,CAACK,IAAP,CAAYC;AAAhD,OAAP;;AACF,SAAKb,aAAL;AACE,aAAOO,MAAM,CAACQ,KAAd;;AACF,SAAKC,kBAAL;AACE,aAAOT,MAAM,CAACQ,KAAP,CAAaE,MAApB;;AACF,SAAKlB,YAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAY,SAACC,MAAM,CAACK,IAAP,CAAYE,GAAb,GAAmBP,MAAM,CAACK;AAAtC,OAAP;;AACF,SAAKT,eAAL;AACEO,MAAAA,SAAS,GAAGF,MAAM,CAACU,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,CAAZ;AACAI,MAAAA,SAAS,CAACH,MAAM,CAACY,MAAR,CAAT,CAAyB,UAAzB,EAAqCC,IAArC,CAA0Cb,MAAM,CAACc,OAAjD;AACA,aAAOX,SAAP;;AACF,SAAKN,cAAL;AACEM,MAAAA,SAAS,GAAGL,KAAK,CAAC,EAAD,EAAKC,KAAL,CAAjB;AAEA,UAAIgB,QAAQ,GAAGZ,SAAS,CAACH,MAAM,CAACY,MAAR,CAAT,CAAyB,UAAzB,EAAqCI,KAArC,EAAf;AACA,UAAIC,GAAG,GAAGF,QAAQ,CAACG,SAAT,CACPJ,OAAD,IAAaA,OAAO,CAACP,GAAR,KAAgBP,MAAM,CAACmB,SAD5B,CAAV;AAGAJ,MAAAA,QAAQ,CAACK,MAAT,CAAgBH,GAAhB,EAAqB,CAArB;AAEAd,MAAAA,SAAS,CAACH,MAAM,CAACY,MAAR,CAAT,CAAyB,UAAzB,IAAuCG,QAAvC;AACA,aAAOZ,SAAP;;AACF,SAAKR,WAAL;AACEQ,MAAAA,SAAS,GAAGF,MAAM,CAACU,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,CAAZ;AACA,aAAOI,SAAS,CAACH,MAAM,CAACY,MAAP,CAAcN,IAAf,CAAhB;AAEA,aAAOH,SAAP;;AACF;AACE,aAAOJ,KAAP;AA9BJ;AAgCD,CAnCD","sourcesContent":["import {\n  RECEIVE_POST,\n  RECEIVE_POSTS,\n  RECEIVE_NEW_POST,\n  REMOVE_POST,\n} from \"../actions/post_actions\";\nimport { RECEIVE_COMMENT, REMOVE_COMMENT } from '../actions/comment_actions';\nimport {merge} from 'lodash';\n\nexport default (state = {}, action) => {\n  Object.freeze(state);\n  let nextState;\n  switch (action.type) {\n    case RECEIVE_NEW_POST:\n      return { ...state, [action.post.data._id]: action.post.data };\n    case RECEIVE_POSTS:\n      return action.posts;\n    case RECEIVE_USER_POSTS:\n      return action.posts.userId;\n    case RECEIVE_POST:\n      return { ...state, [action.post._id]: action.post };\n    case RECEIVE_COMMENT:\n      nextState = Object.assign({}, state);\n      nextState[action.postId][\"comments\"].push(action.comment);\n      return nextState;\n    case REMOVE_COMMENT:\n      nextState = merge({}, state);\n\n      let comments = nextState[action.postId][\"comments\"].slice();\n      let idx = comments.findIndex(\n        (comment) => comment._id === action.commentId\n      );\n      comments.splice(idx, 1);\n\n      nextState[action.postId][\"comments\"] = comments;\n      return nextState;\n    case REMOVE_POST:\n      nextState = Object.assign({}, state);\n      delete nextState[action.postId.data];\n\n      return nextState;\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}