{"ast":null,"code":"import * as APIUtil from \"../util/post_api_util\";\nimport { receiveUser } from \"./user_actions\";\nexport const RECEIVE_POST = \"RECEIVE_POST\";\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const RECEIVE_POST_ERRORS = \"RECEIVE_POST_ERRORS\";\nexport const CLEAR_POST_ERRORS = \"CLEAR_POST_ERRORS\";\nexport const RECEIVE_NEW_POST = \"RECEIVE_NEW_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\nexport const receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n});\nexport const receiveNewPost = post => ({\n  type: RECEIVE_NEW_POST,\n  post\n});\nexport const receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n});\nexport const receivePostErrors = errors => ({\n  type: RECEIVE_POST_ERRORS,\n  errors\n});\nexport const clearPostErrors = () => ({\n  type: CLEAR_POST_ERRORS\n});\nexport const createPost = post => dispatch => APIUtil.createPost(post).then(post => dispatch(receiveNewPost(post)), err => dispatch(receivePostErrors(err.response.data)));\nexport const fetchPosts = () => dispatch => {\n  return APIUtil.fetchPosts().then(posts => dispatch(receivePosts(posts.data)));\n};\nexport const fetchUserPosts = userId => dispatch => {\n  return APIUtil.fetchUserPosts(userId).then(posts => dispatch(receivePosts(posts.data)));\n};\nexport const fetchPost = postId => dispatch => APIUtil.fetchPost(postId).then(post => dispatch(receivePost(post.data)));\nexport const savePost = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(user => {\n    dispatch(receiveUser(user));\n  });\n};","map":{"version":3,"sources":["/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/src/actions/post_actions.js"],"names":["APIUtil","receiveUser","RECEIVE_POST","RECEIVE_POSTS","RECEIVE_POST_ERRORS","CLEAR_POST_ERRORS","RECEIVE_NEW_POST","DELETE_POST","receivePost","post","type","receiveNewPost","receivePosts","posts","receivePostErrors","errors","clearPostErrors","createPost","dispatch","then","err","response","data","fetchPosts","fetchUserPosts","userId","fetchPost","postId","savePost","body","user"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,uBAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,WAAW,GAAIC,IAAD,KAAW;AACpCC,EAAAA,IAAI,EAAER,YAD8B;AAEpCO,EAAAA;AAFoC,CAAX,CAApB;AAKP,OAAO,MAAME,cAAc,GAAIF,IAAD,KAAW;AACvCC,EAAAA,IAAI,EAAEJ,gBADiC;AAEvCG,EAAAA;AAFuC,CAAX,CAAvB;AAKP,OAAO,MAAMG,YAAY,GAAIC,KAAD,KAAY;AACtCH,EAAAA,IAAI,EAAEP,aADgC;AAEtCU,EAAAA;AAFsC,CAAZ,CAArB;AAKP,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,KAAa;AAC5CL,EAAAA,IAAI,EAAEN,mBADsC;AAE5CW,EAAAA;AAF4C,CAAb,CAA1B;AAKP,OAAO,MAAMC,eAAe,GAAG,OAAO;AACpCN,EAAAA,IAAI,EAAEL;AAD8B,CAAP,CAAxB;AAMP,OAAO,MAAMY,UAAU,GAAIR,IAAD,IAAWS,QAAD,IAClClB,OAAO,CAACiB,UAAR,CAAmBR,IAAnB,EAAyBU,IAAzB,CACGV,IAAD,IAAUS,QAAQ,CAACP,cAAc,CAACF,IAAD,CAAf,CADpB,EAEGW,GAAD,IAASF,QAAQ,CAACJ,iBAAiB,CAACM,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAlB,CAFnB,CADK;AAMP,OAAO,MAAMC,UAAU,GAAG,MAAOL,QAAD,IAAc;AAC5C,SAAOlB,OAAO,CAACuB,UAAR,GAAqBJ,IAArB,CAA2BN,KAAD,IAC/BK,QAAQ,CAACN,YAAY,CAACC,KAAK,CAACS,IAAP,CAAb,CADH,CAAP;AAGD,CAJM;AAMP,OAAO,MAAME,cAAc,GAAIC,MAAD,IAAaP,QAAD,IAAc;AACtD,SAAOlB,OAAO,CAACwB,cAAR,CAAuBC,MAAvB,EAA+BN,IAA/B,CAAqCN,KAAD,IACzCK,QAAQ,CAACN,YAAY,CAACC,KAAK,CAACS,IAAP,CAAb,CADH,CAAP;AAGD,CAJM;AAMP,OAAO,MAAMI,SAAS,GAAIC,MAAD,IAAaT,QAAD,IACnClB,OAAO,CAAC0B,SAAR,CAAkBC,MAAlB,EAA0BR,IAA1B,CAAgCV,IAAD,IAAUS,QAAQ,CAACV,WAAW,CAACC,IAAI,CAACa,IAAN,CAAZ,CAAjD,CADK;AAGP,OAAO,MAAMM,QAAQ,GAAG,CAACD,MAAD,EAASE,IAAT,KAAmBX,QAAD,IAAc;AACtD,SAAOlB,OAAO,CAAC4B,QAAR,CAAiBD,MAAjB,EAAyBE,IAAzB,EAA+BV,IAA/B,CAAqCW,IAAD,IAAU;AACnDZ,IAAAA,QAAQ,CAACjB,WAAW,CAAC6B,IAAD,CAAZ,CAAR;AACD,GAFM,CAAP;AAGD,CAJM","sourcesContent":["import * as APIUtil from \"../util/post_api_util\";\nimport { receiveUser } from \"./user_actions\";\n\nexport const RECEIVE_POST = \"RECEIVE_POST\";\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const RECEIVE_POST_ERRORS = \"RECEIVE_POST_ERRORS\";\nexport const CLEAR_POST_ERRORS = \"CLEAR_POST_ERRORS\";\nexport const RECEIVE_NEW_POST = \"RECEIVE_NEW_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\n\nexport const receivePost = (post) => ({\n  type: RECEIVE_POST,\n  post,\n});\n\nexport const receiveNewPost = (post) => ({\n  type: RECEIVE_NEW_POST,\n  post,\n});\n\nexport const receivePosts = (posts) => ({\n  type: RECEIVE_POSTS,\n  posts,\n});\n\nexport const receivePostErrors = (errors) => ({\n  type: RECEIVE_POST_ERRORS,\n  errors,\n});\n\nexport const clearPostErrors = () => ({\n  type: CLEAR_POST_ERRORS,\n});\n\n\n\nexport const createPost = (post) => (dispatch) =>\n  APIUtil.createPost(post).then(\n    (post) => dispatch(receiveNewPost(post)),\n    (err) => dispatch(receivePostErrors(err.response.data))\n  );\n\nexport const fetchPosts = () => (dispatch) => {\n  return APIUtil.fetchPosts().then((posts) =>\n    dispatch(receivePosts(posts.data))\n  );\n};\n\nexport const fetchUserPosts = (userId) => (dispatch) => {\n  return APIUtil.fetchUserPosts(userId).then((posts) =>\n    dispatch(receivePosts(posts.data))\n  );\n};\n\nexport const fetchPost = (postId) => (dispatch) =>\n  APIUtil.fetchPost(postId).then((post) => dispatch(receivePost(post.data)));\n\nexport const savePost = (postId, body) => (dispatch) => {\n  return APIUtil.savePost(postId, body).then((user) => {\n    dispatch(receiveUser(user));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}