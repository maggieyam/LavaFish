{"ast":null,"code":"import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode'; // on a successful login close the modal form\n\nimport { closeModal } from '../actions/modal_actions';\nexport const RECEIVE_CURRENT_USER = 'RECEIVE_CURRENT_USER';\nexport const RECEIVE_USER_LOGOUT = 'RECEIVE_USER_LOGOUT';\nexport const RECEIVE_SESSION_ERRORS = 'RECEIVE_SESSION_ERRORS';\nexport const CLEAR_SESSION_ERRORS = 'CLEAR_SESSION_ERRORS';\nexport const receiveSessionErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n}); // to clear errors if user leaves the session form\n\nexport const clearSessionErrors = () => ({\n  type: CLEAR_SESSION_ERRORS\n});\nexport const receiveCurrentUser = currentUser => ({\n  type: RECEIVE_CURRENT_USER,\n  currentUser\n});\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n});\nexport const loginUser = user => dispatch => APIUtil.login(user).then(res => {\n  const {\n    token\n  } = res.data;\n  localStorage.setItem('jwtToken', token);\n  APIUtil.setAuthToken(token);\n  const decoded = jwt_decode(token);\n  dispatch(receiveCurrentUser(decoded));\n  dispatch(closeModal());\n  dispatch(clearSessionErrors());\n}).catch(err => {\n  dispatch(receiveSessionErrors(err.response.data));\n});\nexport const signupUser = user => dispatch => APIUtil.signup(user).then(() => {\n  dispatch(loginUser(user));\n}, err => {\n  dispatch(receiveSessionErrors(err.response.data));\n});\nexport const logout = () => dispatch => {\n  localStorage.removeItem('jwtToken');\n  APIUtil.setAuthToken(false);\n  dispatch(logoutUser());\n};","map":{"version":3,"sources":["/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/src/actions/session_actions.js"],"names":["APIUtil","jwt_decode","closeModal","RECEIVE_CURRENT_USER","RECEIVE_USER_LOGOUT","RECEIVE_SESSION_ERRORS","CLEAR_SESSION_ERRORS","receiveSessionErrors","errors","type","clearSessionErrors","receiveCurrentUser","currentUser","logoutUser","loginUser","user","dispatch","login","then","res","token","data","localStorage","setItem","setAuthToken","decoded","catch","err","response","signupUser","signup","logout","removeItem"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AAGP,OAAO,MAAMC,oBAAoB,GAAGC,MAAM,KAAK;AAC7CC,EAAAA,IAAI,EAAEJ,sBADuC;AAE7CG,EAAAA;AAF6C,CAAL,CAAnC,C,CAKP;;AACA,OAAO,MAAME,kBAAkB,GAAG,OAAO;AACvCD,EAAAA,IAAI,EAAEH;AADiC,CAAP,CAA3B;AAIP,OAAO,MAAMK,kBAAkB,GAAGC,WAAW,KAAK;AAChDH,EAAAA,IAAI,EAAEN,oBAD0C;AAEhDS,EAAAA;AAFgD,CAAL,CAAtC;AAKP,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC/BJ,EAAAA,IAAI,EAAEL;AADyB,CAAP,CAAnB;AAKP,OAAO,MAAMU,SAAS,GAAGC,IAAI,IAAIC,QAAQ,IACvChB,OAAO,CAACiB,KAAR,CAAcF,IAAd,EAAoBG,IAApB,CAAyBC,GAAG,IAAI;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAYD,GAAG,CAACE,IAAtB;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACApB,EAAAA,OAAO,CAACwB,YAAR,CAAqBJ,KAArB;AACA,QAAMK,OAAO,GAAGxB,UAAU,CAACmB,KAAD,CAA1B;AACAJ,EAAAA,QAAQ,CAACL,kBAAkB,CAACc,OAAD,CAAnB,CAAR;AACAT,EAAAA,QAAQ,CAACd,UAAU,EAAX,CAAR;AACAc,EAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;AACD,CARD,EASCgB,KATD,CASOC,GAAG,IAAI;AACZX,EAAAA,QAAQ,CAACT,oBAAoB,CAACoB,GAAG,CAACC,QAAJ,CAAaP,IAAd,CAArB,CAAR;AACD,CAXD,CADK;AAeP,OAAO,MAAMQ,UAAU,GAAGd,IAAI,IAAIC,QAAQ,IACxChB,OAAO,CAAC8B,MAAR,CAAef,IAAf,EAAqBG,IAArB,CAA0B,MAAM;AAC9BF,EAAAA,QAAQ,CAACF,SAAS,CAACC,IAAD,CAAV,CAAR;AACD,CAFD,EAEGY,GAAG,IAAI;AACRX,EAAAA,QAAQ,CAACT,oBAAoB,CAACoB,GAAG,CAACC,QAAJ,CAAaP,IAAd,CAArB,CAAR;AACD,CAJD,CADK;AAUP,OAAO,MAAMU,MAAM,GAAG,MAAMf,QAAQ,IAAI;AACtCM,EAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB;AACAhC,EAAAA,OAAO,CAACwB,YAAR,CAAqB,KAArB;AACAR,EAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACD,CAJM","sourcesContent":["import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\n// on a successful login close the modal form\nimport { closeModal } from '../actions/modal_actions';\n\nexport const RECEIVE_CURRENT_USER = 'RECEIVE_CURRENT_USER';\nexport const RECEIVE_USER_LOGOUT = 'RECEIVE_USER_LOGOUT';\nexport const RECEIVE_SESSION_ERRORS = 'RECEIVE_SESSION_ERRORS';\nexport const CLEAR_SESSION_ERRORS = 'CLEAR_SESSION_ERRORS';\n\n\nexport const receiveSessionErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n})\n\n// to clear errors if user leaves the session form\nexport const clearSessionErrors = () => ({\n  type: CLEAR_SESSION_ERRORS\n})\n\nexport const receiveCurrentUser = currentUser => ({\n  type: RECEIVE_CURRENT_USER,\n  currentUser\n})\n\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n})\n\n\nexport const loginUser = user => dispatch => (\n  APIUtil.login(user).then(res => {\n    const { token } = res.data;\n    localStorage.setItem('jwtToken', token);\n    APIUtil.setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(receiveCurrentUser(decoded));\n    dispatch(closeModal());\n    dispatch(clearSessionErrors());\n  })\n  .catch(err => {\n    dispatch(receiveSessionErrors(err.response.data));\n  })\n)\n\nexport const signupUser = user => dispatch => (\n  APIUtil.signup(user).then(() => {\n    dispatch(loginUser(user))\n  }, err => {\n    dispatch(receiveSessionErrors(err.response.data))\n  }\n  )\n);\n\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem('jwtToken');\n  APIUtil.setAuthToken(false);\n  dispatch(logoutUser())\n}"]},"metadata":{},"sourceType":"module"}