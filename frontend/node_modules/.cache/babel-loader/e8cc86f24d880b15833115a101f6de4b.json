{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/root';\nimport configureStore from './store/store';\nimport jwt_decode from 'jwt-decode';\nimport { setAuthToken } from './util/session_api_util';\nimport { logout } from './actions/session_actions';\nimport { openModal, closeModal } from './actions/modal_actions';\nimport { fetchPost } from './actions/post_actions';\nimport { fetchTags } from './actions/tag_actions';\nimport { savePost } from './util/post_api_util';\nimport axios from 'axios';\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store;\n\n  if (localStorage.jwtToken) {\n    setAuthToken(localStorage.jwtToken);\n    const userInfo = jwt_decode(localStorage.jwtToken);\n    const preloadedState = {\n      session: {\n        isAuthenticated: true,\n        userInfo\n      }\n    };\n    store = configureStore(preloadedState);\n    const now = Date.now() / 1000;\n\n    if (userInfo.exp < now) {\n      store.dispatch(logout()); // should we immediately redirect to log in?\n    }\n  } else {\n    store = configureStore({});\n  }\n\n  const root = document.getElementById('root');\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(Root, {\n    store: store\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 19\n  }, this), root); // START TESTING\n\n  window.store = store;\n  window.dispatch = store.dispatch;\n  window.openModal = openModal;\n  window.closeModal = closeModal;\n  window.fetchTags = fetchTags;\n  window.fetchPost = fetchPost;\n  window.logout = logout;\n  window.savePost = savePost;\n  window.axios = axios; // END TESTING\n});","map":{"version":3,"sources":["/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/src/index.js"],"names":["React","ReactDOM","Root","configureStore","jwt_decode","setAuthToken","logout","openModal","closeModal","fetchPost","fetchTags","savePost","axios","document","addEventListener","store","localStorage","jwtToken","userInfo","preloadedState","session","isAuthenticated","now","Date","exp","dispatch","root","getElementById","render","window"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,yBAAtC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,MAAM;AAClD,MAAIC,KAAJ;;AAEA,MAAIC,YAAY,CAACC,QAAjB,EAA2B;AACzBZ,IAAAA,YAAY,CAACW,YAAY,CAACC,QAAd,CAAZ;AACA,UAAMC,QAAQ,GAAGd,UAAU,CAACY,YAAY,CAACC,QAAd,CAA3B;AACA,UAAME,cAAc,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,eAAe,EAAE,IAAnB;AAAyBH,QAAAA;AAAzB;AAAX,KAAvB;AACAH,IAAAA,KAAK,GAAGZ,cAAc,CAACgB,cAAD,CAAtB;AACA,UAAMG,GAAG,GAAGC,IAAI,CAACD,GAAL,KAAa,IAAzB;;AAEA,QAAIJ,QAAQ,CAACM,GAAT,GAAeF,GAAnB,EAAwB;AACtBP,MAAAA,KAAK,CAACU,QAAN,CAAenB,MAAM,EAArB,EADsB,CAEtB;AACD;AAEF,GAZD,MAYO;AACLS,IAAAA,KAAK,GAAGZ,cAAc,CAAC,EAAD,CAAtB;AACD;;AAED,QAAMuB,IAAI,GAAGb,QAAQ,CAACc,cAAT,CAAwB,MAAxB,CAAb;AAEA1B,EAAAA,QAAQ,CAAC2B,MAAT,eAAgB,QAAC,IAAD;AAAM,IAAA,KAAK,EAAEb;AAAb;AAAA;AAAA;AAAA;AAAA,UAAhB,EAAwCW,IAAxC,EArBkD,CAuBlD;;AACAG,EAAAA,MAAM,CAACd,KAAP,GAAeA,KAAf;AACAc,EAAAA,MAAM,CAACJ,QAAP,GAAkBV,KAAK,CAACU,QAAxB;AACAI,EAAAA,MAAM,CAACtB,SAAP,GAAmBA,SAAnB;AACAsB,EAAAA,MAAM,CAACrB,UAAP,GAAoBA,UAApB;AACAqB,EAAAA,MAAM,CAACnB,SAAP,GAAmBA,SAAnB;AACAmB,EAAAA,MAAM,CAACpB,SAAP,GAAmBA,SAAnB;AACAoB,EAAAA,MAAM,CAACvB,MAAP,GAAgBA,MAAhB;AACAuB,EAAAA,MAAM,CAAClB,QAAP,GAAkBA,QAAlB;AACAkB,EAAAA,MAAM,CAACjB,KAAP,GAAeA,KAAf,CAhCkD,CAkClD;AACD,CAnCD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/root';\nimport configureStore from './store/store';\nimport jwt_decode from 'jwt-decode';\nimport { setAuthToken } from './util/session_api_util';\nimport { logout } from './actions/session_actions';\nimport { openModal, closeModal } from './actions/modal_actions';\nimport { fetchPost } from './actions/post_actions';\nimport { fetchTags } from './actions/tag_actions';\nimport { savePost } from './util/post_api_util';\nimport axios from 'axios';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store;\n\n  if (localStorage.jwtToken) {\n    setAuthToken(localStorage.jwtToken);\n    const userInfo = jwt_decode(localStorage.jwtToken);\n    const preloadedState = { session: { isAuthenticated: true, userInfo}};\n    store = configureStore(preloadedState);\n    const now = Date.now() / 1000;\n\n    if (userInfo.exp < now) {\n      store.dispatch(logout());\n      // should we immediately redirect to log in?\n    }\n\n  } else {\n    store = configureStore({});\n  }\n\n  const root = document.getElementById('root');\n\n  ReactDOM.render(<Root store={store} />, root);\n\n  // START TESTING\n  window.store = store;\n  window.dispatch = store.dispatch;\n  window.openModal = openModal;\n  window.closeModal = closeModal;\n  window.fetchTags = fetchTags;\n  window.fetchPost = fetchPost;\n  window.logout = logout;\n  window.savePost = savePost;\n  window.axios = axios;\n\n  // END TESTING\n})\n\n"]},"metadata":{},"sourceType":"module"}