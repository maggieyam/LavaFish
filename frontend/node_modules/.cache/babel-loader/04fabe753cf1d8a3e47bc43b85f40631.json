{"ast":null,"code":"import * as APIUtil from '../util/post_api_util';\nimport { receiveUser } from './user_actions';\nexport const RECEIVE_POST = 'RECEIVE_POST';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport const RECEIVE_POST_ERRORS = 'RECEIVE_POST_ERRORS';\nexport const CLEAR_POST_ERRORS = 'CLEAR_POST_ERRORS';\nexport const RECEIVE_NEW_POST = 'RECEIVE_NEW_POST';\nexport const REMOVE_POST = 'REMOVE_POST';\nexport const receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n});\nexport const receiveNewPost = post => ({\n  type: RECEIVE_NEW_POST,\n  post\n});\nexport const receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n});\nexport const receivePostErrors = errors => ({\n  type: RECEIVE_POST_ERRORS,\n  errors\n});\nexport const clearPostErrors = () => ({\n  type: CLEAR_POST_ERRORS\n});\nexport const removePost = postId => ({\n  type: REMOVE_POST,\n  postId\n});\nexport const receiveUserPosts = userId => dispatch(APIUtil.fetchUserPosts(userId).then());\nexport const createPost = post => dispatch => APIUtil.createPost(post).then(post => dispatch(receiveNewPost(post)), err => dispatch(receivePostErrors(err.response.data)));\nexport const fetchPosts = () => dispatch => {\n  return APIUtil.fetchPosts().then(posts => dispatch(receivePosts(posts.data)));\n};\nexport const fetchUserPosts = userId => dispatch => {\n  return APIUtil.fetchUserPosts(userId).then(posts => dispatch(receivePosts(posts.data)));\n};\nexport const fetchPost = postId => dispatch => APIUtil.fetchPost(postId).then(post => dispatch(receivePost(post.data)));\nexport const savePost = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(user => {\n    dispatch(receiveUser(user));\n  });\n};\nexport const deletePost = postId => dispatch => {\n  return APIUtil.deletePost(postId).then(postId => {\n    dispatch(removePost(postId));\n  });\n};","map":{"version":3,"sources":["/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/src/actions/post_actions.js"],"names":["APIUtil","receiveUser","RECEIVE_POST","RECEIVE_POSTS","RECEIVE_POST_ERRORS","CLEAR_POST_ERRORS","RECEIVE_NEW_POST","REMOVE_POST","receivePost","post","type","receiveNewPost","receivePosts","posts","receivePostErrors","errors","clearPostErrors","removePost","postId","receiveUserPosts","userId","dispatch","fetchUserPosts","then","createPost","err","response","data","fetchPosts","fetchPost","savePost","body","user","deletePost"],"mappings":"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","sourcesContent":["import * as APIUtil from '../util/post_api_util';\nimport { receiveUser } from './user_actions';\n\nexport const RECEIVE_POST = 'RECEIVE_POST';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport const RECEIVE_POST_ERRORS = 'RECEIVE_POST_ERRORS';\nexport const CLEAR_POST_ERRORS = 'CLEAR_POST_ERRORS';\nexport const RECEIVE_NEW_POST = 'RECEIVE_NEW_POST';\nexport const REMOVE_POST = 'REMOVE_POST';\n\n\nexport const receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n})\n\nexport const receiveNewPost = post => ({\n  type: RECEIVE_NEW_POST,\n  post\n})\n\nexport const receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n})\n\nexport const receivePostErrors = errors => ({\n  type: RECEIVE_POST_ERRORS,\n  errors\n})\n\nexport const clearPostErrors = () => ({\n  type: CLEAR_POST_ERRORS,\n})\n\nexport const removePost = postId => ({\n  type: REMOVE_POST,\n  postId\n})\n\nexport const receiveUserPosts = (userId) => dispatch (\n  APIUtil.fetchUserPosts(userId).then()\n)\n\nexport const createPost = post => dispatch => (\n    APIUtil.createPost(post).then(\n      post => dispatch(receiveNewPost(post)),\n      err => dispatch(receivePostErrors(err.response.data))\n    )\n)\n\nexport const fetchPosts = () => dispatch => {\n  return APIUtil.fetchPosts().then(\n    posts => dispatch(receivePosts(posts.data))\n  )\n}\n\n\nexport const fetchUserPosts = userId => dispatch => {\n  return APIUtil.fetchUserPosts(userId).then(\n    posts => dispatch(receivePosts(posts.data))\n  )\n}\n\nexport const fetchPost = postId => dispatch => (\n  APIUtil.fetchPost(postId).then(\n    post => dispatch(receivePost(post.data))\n  )\n)\n\nexport const savePost = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(\n    user => {dispatch(receiveUser(user))}\n  )\n}\n    \nexport const deletePost = (postId) => dispatch => {\n  return APIUtil.deletePost(postId).then(\n    postId => {dispatch(removePost(postId))}\n  )\n}\n    \n"]},"metadata":{},"sourceType":"module"}