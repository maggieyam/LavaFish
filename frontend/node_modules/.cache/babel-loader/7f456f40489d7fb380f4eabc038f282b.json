{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = move;\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction move(array, moveIndex, toIndex) {\n  /* #move - Moves an array item from one position in an array to another.\n      Note: This is a pure function so a new array will be returned, instead\n     of altering the array argument.\n     Arguments:\n    1. array     (String) : Array in which to move an item.         (required)\n    2. moveIndex (Object) : The index of the item to move.          (required)\n    3. toIndex   (Object) : The index to move item at moveIndex to. (required)\n  */\n  var item = array[moveIndex];\n  var length = array.length;\n  var diff = moveIndex - toIndex;\n\n  if (diff > 0) {\n    // move left\n    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));\n  } else if (diff < 0) {\n    // move right\n    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));\n  }\n\n  return array;\n}","map":{"version":3,"sources":["/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/node_modules/lodash-move/lib/index.js"],"names":["Object","defineProperty","exports","value","default","move","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","array","moveIndex","toIndex","item","diff","concat","slice"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,IAAlB;;AAEA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AAAE,SAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGH,KAAK,CAACD,GAAG,CAACK,MAAL,CAA5B,EAA0CF,CAAC,GAAGH,GAAG,CAACK,MAAlD,EAA0DF,CAAC,EAA3D,EAA+D;AAAEC,MAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUH,GAAG,CAACG,CAAD,CAAb;AAAmB;;AAAC,WAAOC,IAAP;AAAc,GAA7H,MAAmI;AAAE,WAAOH,KAAK,CAACK,IAAN,CAAWN,GAAX,CAAP;AAAyB;AAAE;;AAEnM,SAASF,IAAT,CAAcS,KAAd,EAAqBC,SAArB,EAAgCC,OAAhC,EAAyC;AACvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,MAAIC,IAAI,GAAGH,KAAK,CAACC,SAAD,CAAhB;AACA,MAAIH,MAAM,GAAGE,KAAK,CAACF,MAAnB;AACA,MAAIM,IAAI,GAAGH,SAAS,GAAGC,OAAvB;;AAEA,MAAIE,IAAI,GAAG,CAAX,EAAc;AACZ;AACA,WAAO,GAAGC,MAAH,CAAUb,kBAAkB,CAACQ,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeJ,OAAf,CAAD,CAA5B,EAAuD,CAACC,IAAD,CAAvD,EAA+DX,kBAAkB,CAACQ,KAAK,CAACM,KAAN,CAAYJ,OAAZ,EAAqBD,SAArB,CAAD,CAAjF,EAAoHT,kBAAkB,CAACQ,KAAK,CAACM,KAAN,CAAYL,SAAS,GAAG,CAAxB,EAA2BH,MAA3B,CAAD,CAAtI,CAAP;AACD,GAHD,MAGO,IAAIM,IAAI,GAAG,CAAX,EAAc;AACnB;AACA,WAAO,GAAGC,MAAH,CAAUb,kBAAkB,CAACQ,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeL,SAAf,CAAD,CAA5B,EAAyDT,kBAAkB,CAACQ,KAAK,CAACM,KAAN,CAAYL,SAAS,GAAG,CAAxB,EAA2BC,OAAO,GAAG,CAArC,CAAD,CAA3E,EAAsH,CAACC,IAAD,CAAtH,EAA8HX,kBAAkB,CAACQ,KAAK,CAACM,KAAN,CAAYJ,OAAO,GAAG,CAAtB,EAAyBJ,MAAzB,CAAD,CAAhJ,CAAP;AACD;;AACD,SAAOE,KAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = move;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction move(array, moveIndex, toIndex) {\n  /* #move - Moves an array item from one position in an array to another.\n      Note: This is a pure function so a new array will be returned, instead\n     of altering the array argument.\n     Arguments:\n    1. array     (String) : Array in which to move an item.         (required)\n    2. moveIndex (Object) : The index of the item to move.          (required)\n    3. toIndex   (Object) : The index to move item at moveIndex to. (required)\n  */\n  var item = array[moveIndex];\n  var length = array.length;\n  var diff = moveIndex - toIndex;\n\n  if (diff > 0) {\n    // move left\n    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));\n  } else if (diff < 0) {\n    // move right\n    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));\n  }\n  return array;\n}"]},"metadata":{},"sourceType":"script"}