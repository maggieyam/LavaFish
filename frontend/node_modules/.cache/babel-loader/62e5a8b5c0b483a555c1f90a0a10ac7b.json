{"ast":null,"code":"import * as APIUtil from '../util/post_api_util';\nimport { receiveUser } from './user_actions';\nexport const RECEIVE_POST = 'RECEIVE_POST';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport const RECEIVE_POST_ERRORS = 'RECEIVE_POST_ERRORS';\nexport const CLEAR_POST_ERRORS = 'CLEAR_POST_ERRORS';\nexport const RECEIVE_NEW_POST = 'RECEIVE_NEW_POST';\nexport const REMOVE_POST = 'REMOVE_POST';\nexport const receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n});\nexport const receiveNewPost = post => ({\n  type: RECEIVE_NEW_POST,\n  post\n});\nexport const receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n});\nexport const receivePostErrors = errors => ({\n  type: RECEIVE_POST_ERRORS,\n  errors\n});\nexport const clearPostErrors = () => ({\n  type: CLEAR_POST_ERRORS\n});\nexport const removePost = postId => ({\n  type: REMOVE_POST,\n  postId\n});\nexport const createPost = post => dispatch => APIUtil.createPost(post).then(post => dispatch(receiveNewPost(post)), err => dispatch(receivePostErrors(err.response.data)));\nexport const fetchPosts = () => dispatch => {\n  return APIUtil.fetchPosts().then(posts => dispatch(receivePosts(posts.data)));\n};\nexport const fetchUserPosts = userId => dispatch => {\n  return APIUtil.fetchUserPosts(userId).then(posts => dispatch(receivePosts(posts.data)));\n};\nexport const fetchPost = postId => dispatch => APIUtil.fetchPost(postId).then(post => dispatch(receivePost(post.data)));\nexport const savePost = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(user => {\n    dispatch(receiveUser(user));\n  });\n};\nexport const Post = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(user => {\n    dispatch(receiveUser(user));\n  });\n};","map":{"version":3,"sources":["/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/src/actions/post_actions.js"],"names":["APIUtil","receiveUser","RECEIVE_POST","RECEIVE_POSTS","RECEIVE_POST_ERRORS","CLEAR_POST_ERRORS","RECEIVE_NEW_POST","REMOVE_POST","receivePost","post","type","receiveNewPost","receivePosts","posts","receivePostErrors","errors","clearPostErrors","removePost","postId","createPost","dispatch","then","err","response","data","fetchPosts","fetchUserPosts","userId","fetchPost","savePost","body","user","Post"],"mappings":"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","sourcesContent":["import * as APIUtil from '../util/post_api_util';\nimport { receiveUser } from './user_actions';\n\nexport const RECEIVE_POST = 'RECEIVE_POST';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport const RECEIVE_POST_ERRORS = 'RECEIVE_POST_ERRORS';\nexport const CLEAR_POST_ERRORS = 'CLEAR_POST_ERRORS';\nexport const RECEIVE_NEW_POST = 'RECEIVE_NEW_POST';\nexport const REMOVE_POST = 'REMOVE_POST';\n\n\nexport const receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n})\n\nexport const receiveNewPost = post => ({\n  type: RECEIVE_NEW_POST,\n  post\n})\n\nexport const receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n})\n\nexport const receivePostErrors = errors => ({\n  type: RECEIVE_POST_ERRORS,\n  errors\n})\n\nexport const clearPostErrors = () => ({\n  type: CLEAR_POST_ERRORS,\n})\n\nexport const removePost = postId => ({\n  type: REMOVE_POST,\n  postId\n})\n\n\nexport const createPost = post => dispatch => (\n    APIUtil.createPost(post).then(\n      post => dispatch(receiveNewPost(post)),\n      err => dispatch(receivePostErrors(err.response.data))\n    )\n)\n\nexport const fetchPosts = () => dispatch => {\n  return APIUtil.fetchPosts().then(\n    posts => dispatch(receivePosts(posts.data))\n  )\n}\n\n\nexport const fetchUserPosts = userId => dispatch => {\n  return APIUtil.fetchUserPosts(userId).then(\n    posts => dispatch(receivePosts(posts.data))\n  )\n}\n\nexport const fetchPost = postId => dispatch => (\n  APIUtil.fetchPost(postId).then(\n    post => dispatch(receivePost(post.data))\n  )\n)\n\nexport const savePost = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(\n    user => {dispatch(receiveUser(user))}\n  )\n}\n    \nexport const Post = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(\n    user => {dispatch(receiveUser(user))}\n  )\n}\n    \n"]},"metadata":{},"sourceType":"module"}