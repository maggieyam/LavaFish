{"ast":null,"code":"import * as APIUtil from \"../util/post_api_util\";\nimport { receiveUser } from \"./user_actions\";\nexport const RECEIVE_POST = \"RECEIVE_POST\";\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const RECEIVE_POST_ERRORS = \"RECEIVE_POST_ERRORS\";\nexport const CLEAR_POST_ERRORS = \"CLEAR_POST_ERRORS\";\nexport const RECEIVE_NEW_POST = \"RECEIVE_NEW_POST\";\nexport const REMOVE_POST = \"REMOVE_POST\";\nexport const RECEIVE_USER_POSTS = \"RECEIVE_USER_POSTS\";\nexport const receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n});\nexport const receiveNewPost = post => ({\n  type: RECEIVE_NEW_POST,\n  post\n});\nexport const receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n});\nexport const receivePostErrors = errors => ({\n  type: RECEIVE_POST_ERRORS,\n  errors\n});\nexport const clearPostErrors = () => ({\n  type: CLEAR_POST_ERRORS\n});\nexport const removePost = postId => ({\n  type: REMOVE_POST,\n  postId\n});\nexport const receiveUserPosts = posts => ({\n  type: RECEIVE_USER_POSTS,\n  posts\n});\nexport const createPost = post => dispatch => APIUtil.createPost(post).then(post => dispatch(receiveNewPost(post)), err => dispatch(receivePostErrors(err.response.data)));\nexport const fetchPosts = () => dispatch => {\n  return APIUtil.fetchPosts().then(posts => dispatch(receivePosts(posts.data)));\n};\nexport const fetchUserPosts = userId => dispatch => {\n  return APIUtil.fetchUserPosts(userId).then(posts => dispatch(receivePosts(posts.data)));\n};\nexport const fetchPost = postId => dispatch => APIUtil.fetchPost(postId).then(post => dispatch(receivePost(post.data)));\nexport const savePost = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(user => {\n    dispatch(receiveUser(user));\n  });\n};\nexport const unsavePost = (postId, userId) => dispatch => {\n  return APIUtil.unsavePost(postId, userId).then(user => dispatch(receiveUser(user)));\n};\nexport const editPost = (postId, newData) => dispatch => {\n  return APIUtil.editPost(postId, newData).then(post => {\n    dispatch(receivePost(post));\n  });\n};\nexport const deletePost = postId => dispatch => {\n  return APIUtil.deletePost(postId).then(postId => {\n    dispatch(removePost(postId));\n  });\n};","map":{"version":3,"sources":["/Users/tony/Desktop/App_Academy/Mern/menutube/frontend/src/actions/post_actions.js"],"names":["APIUtil","receiveUser","RECEIVE_POST","RECEIVE_POSTS","RECEIVE_POST_ERRORS","CLEAR_POST_ERRORS","RECEIVE_NEW_POST","REMOVE_POST","RECEIVE_USER_POSTS","receivePost","post","type","receiveNewPost","receivePosts","posts","receivePostErrors","errors","clearPostErrors","removePost","postId","receiveUserPosts","createPost","dispatch","then","err","response","data","fetchPosts","fetchUserPosts","userId","fetchPost","savePost","body","user","unsavePost","editPost","newData","deletePost"],"mappings":"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","sourcesContent":["import * as APIUtil from \"../util/post_api_util\";\nimport { receiveUser } from \"./user_actions\";\n\nexport const RECEIVE_POST = \"RECEIVE_POST\";\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const RECEIVE_POST_ERRORS = \"RECEIVE_POST_ERRORS\";\nexport const CLEAR_POST_ERRORS = \"CLEAR_POST_ERRORS\";\nexport const RECEIVE_NEW_POST = \"RECEIVE_NEW_POST\";\nexport const REMOVE_POST = \"REMOVE_POST\";\nexport const RECEIVE_USER_POSTS = \"RECEIVE_USER_POSTS\";\n\nexport const receivePost = (post) => ({\n  type: RECEIVE_POST,\n  post,\n});\n\nexport const receiveNewPost = (post) => ({\n  type: RECEIVE_NEW_POST,\n  post,\n});\n\nexport const receivePosts = (posts) => ({\n  type: RECEIVE_POSTS,\n  posts,\n});\n\nexport const receivePostErrors = (errors) => ({\n  type: RECEIVE_POST_ERRORS,\n  errors,\n});\n\nexport const clearPostErrors = () => ({\n  type: CLEAR_POST_ERRORS,\n});\n\nexport const removePost = (postId) => ({\n  type: REMOVE_POST,\n  postId\n})\nexport const receiveUserPosts = (posts) => ({\n  type: RECEIVE_USER_POSTS,\n  posts,\n});\n\nexport const createPost = post => dispatch => (\n    APIUtil.createPost(post).then(\n      post => dispatch(receiveNewPost(post)),\n      err => dispatch(receivePostErrors(err.response.data))\n    )\n)\n\nexport const fetchPosts = () => dispatch => {\n  return APIUtil.fetchPosts().then(\n    posts => dispatch(receivePosts(posts.data))\n  )\n}\n\n\nexport const fetchUserPosts = userId => dispatch => {\n  return APIUtil.fetchUserPosts(userId).then(\n    posts => dispatch(receivePosts(posts.data))\n  )\n}\n\nexport const fetchPost = postId => dispatch => (\n  APIUtil.fetchPost(postId).then(\n    post => dispatch(receivePost(post.data))\n  )\n)\n\nexport const savePost = (postId, body) => dispatch => {\n  return APIUtil.savePost(postId, body).then(\n    user => {\n      dispatch(receiveUser(user))\n    }\n  )\n}\n\nexport const unsavePost = (postId, userId) => dispatch => {\n  return APIUtil.unsavePost(postId, userId).then(\n    user => dispatch(receiveUser(user))\n  )\n}\n\nexport const editPost = (postId, newData) => dispatch => {\n  return APIUtil.editPost(postId, newData).then(\n    post => {dispatch(receivePost(post))}\n  )\n}\n    \nexport const deletePost = (postId) => dispatch => {\n  return APIUtil.deletePost(postId).then(\n    postId => {dispatch(removePost(postId))}\n  )\n}\n    \n\n\n"]},"metadata":{},"sourceType":"module"}